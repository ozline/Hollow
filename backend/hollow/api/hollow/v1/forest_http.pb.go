// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.5
// source: hollow/v1/forest.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationForestsComment = "/forest.v1.Forests/Comment"
const OperationForestsGet = "/forest.v1.Forests/Get"
const OperationForestsPush = "/forest.v1.Forests/Push"

type ForestsHTTPServer interface {
	Comment(context.Context, *CommentLeafRequest) (*CommentLeafRePly, error)
	Get(context.Context, *GetLeafsRequest) (*GetLeafsReply, error)
	Push(context.Context, *PushLeafRequest) (*PushLeafReply, error)
}

func RegisterForestsHTTPServer(s *http.Server, srv ForestsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/forest", _Forests_Push0_HTTP_Handler(srv))
	r.GET("/api/forest/all", _Forests_Get0_HTTP_Handler(srv))
	r.POST("/api/forest/{root}", _Forests_Comment0_HTTP_Handler(srv))
}

func _Forests_Push0_HTTP_Handler(srv ForestsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushLeafRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForestsPush)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Push(ctx, req.(*PushLeafRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushLeafReply)
		return ctx.Result(200, reply)
	}
}

func _Forests_Get0_HTTP_Handler(srv ForestsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLeafsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForestsGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetLeafsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeafsReply)
		return ctx.Result(200, reply)
	}
}

func _Forests_Comment0_HTTP_Handler(srv ForestsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentLeafRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationForestsComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Comment(ctx, req.(*CommentLeafRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentLeafRePly)
		return ctx.Result(200, reply)
	}
}

type ForestsHTTPClient interface {
	Comment(ctx context.Context, req *CommentLeafRequest, opts ...http.CallOption) (rsp *CommentLeafRePly, err error)
	Get(ctx context.Context, req *GetLeafsRequest, opts ...http.CallOption) (rsp *GetLeafsReply, err error)
	Push(ctx context.Context, req *PushLeafRequest, opts ...http.CallOption) (rsp *PushLeafReply, err error)
}

type ForestsHTTPClientImpl struct {
	cc *http.Client
}

func NewForestsHTTPClient(client *http.Client) ForestsHTTPClient {
	return &ForestsHTTPClientImpl{client}
}

func (c *ForestsHTTPClientImpl) Comment(ctx context.Context, in *CommentLeafRequest, opts ...http.CallOption) (*CommentLeafRePly, error) {
	var out CommentLeafRePly
	pattern := "/api/forest/{root}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationForestsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ForestsHTTPClientImpl) Get(ctx context.Context, in *GetLeafsRequest, opts ...http.CallOption) (*GetLeafsReply, error) {
	var out GetLeafsReply
	pattern := "/api/forest/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationForestsGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ForestsHTTPClientImpl) Push(ctx context.Context, in *PushLeafRequest, opts ...http.CallOption) (*PushLeafReply, error) {
	var out PushLeafReply
	pattern := "/api/forest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationForestsPush))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
