// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: hollow/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingConnectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PingConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingConnectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingConnectRequestMultiError, or nil if none found.
func (m *PingConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingConnectRequestMultiError(errors)
	}

	return nil
}

// PingConnectRequestMultiError is an error wrapping multiple validation errors
// returned by PingConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type PingConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingConnectRequestMultiError) AllErrors() []error { return m }

// PingConnectRequestValidationError is the validation error returned by
// PingConnectRequest.Validate if the designated constraints aren't met.
type PingConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingConnectRequestValidationError) ErrorName() string {
	return "PingConnectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PingConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingConnectRequestValidationError{}

// Validate checks the field values on SendShortMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendShortMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendShortMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendShortMsgRequestMultiError, or nil if none found.
func (m *SendShortMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendShortMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := SendShortMsgRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SendShortMsgRequestMultiError(errors)
	}

	return nil
}

// SendShortMsgRequestMultiError is an error wrapping multiple validation
// errors returned by SendShortMsgRequest.ValidateAll() if the designated
// constraints aren't met.
type SendShortMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendShortMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendShortMsgRequestMultiError) AllErrors() []error { return m }

// SendShortMsgRequestValidationError is the validation error returned by
// SendShortMsgRequest.Validate if the designated constraints aren't met.
type SendShortMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendShortMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendShortMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendShortMsgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendShortMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendShortMsgRequestValidationError) ErrorName() string {
	return "SendShortMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendShortMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendShortMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendShortMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendShortMsgRequestValidationError{}

// Validate checks the field values on ReBindPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReBindPhoneRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReBindPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReBindPhoneRequestMultiError, or nil if none found.
func (m *ReBindPhoneRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReBindPhoneRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := ReBindPhoneRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := ReBindPhoneRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetMfacode() != "" {

		if utf8.RuneCountInString(m.GetMfacode()) != 6 {
			err := ReBindPhoneRequestValidationError{
				field:  "Mfacode",
				reason: "value length must be 6 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if len(errors) > 0 {
		return ReBindPhoneRequestMultiError(errors)
	}

	return nil
}

// ReBindPhoneRequestMultiError is an error wrapping multiple validation errors
// returned by ReBindPhoneRequest.ValidateAll() if the designated constraints
// aren't met.
type ReBindPhoneRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReBindPhoneRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReBindPhoneRequestMultiError) AllErrors() []error { return m }

// ReBindPhoneRequestValidationError is the validation error returned by
// ReBindPhoneRequest.Validate if the designated constraints aren't met.
type ReBindPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReBindPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReBindPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReBindPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReBindPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReBindPhoneRequestValidationError) ErrorName() string {
	return "ReBindPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReBindPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReBindPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReBindPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReBindPhoneRequestValidationError{}

// Validate checks the field values on LoginUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginUserRequestMultiError, or nil if none found.
func (m *LoginUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 10 {
		err := LoginUserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := LoginUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCode() != "" {

		if utf8.RuneCountInString(m.GetCode()) != 6 {
			err := LoginUserRequestValidationError{
				field:  "Code",
				reason: "value length must be 6 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if len(errors) > 0 {
		return LoginUserRequestMultiError(errors)
	}

	return nil
}

// LoginUserRequestMultiError is an error wrapping multiple validation errors
// returned by LoginUserRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserRequestMultiError) AllErrors() []error { return m }

// LoginUserRequestValidationError is the validation error returned by
// LoginUserRequest.Validate if the designated constraints aren't met.
type LoginUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserRequestValidationError) ErrorName() string { return "LoginUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserRequestValidationError{}

// Validate checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserRequestMultiError, or nil if none found.
func (m *RegisterUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 10 {
		err := RegisterUserRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 16 {
		err := RegisterUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := RegisterUserRequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := RegisterUserRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return RegisterUserRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterUserRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserRequestMultiError) AllErrors() []error { return m }

// RegisterUserRequestValidationError is the validation error returned by
// RegisterUserRequest.Validate if the designated constraints aren't met.
type RegisterUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserRequestValidationError) ErrorName() string {
	return "RegisterUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on NullRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NullRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NullRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NullRequestMultiError, or
// nil if none found.
func (m *NullRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NullRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NullRequestMultiError(errors)
	}

	return nil
}

// NullRequestMultiError is an error wrapping multiple validation errors
// returned by NullRequest.ValidateAll() if the designated constraints aren't met.
type NullRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NullRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NullRequestMultiError) AllErrors() []error { return m }

// NullRequestValidationError is the validation error returned by
// NullRequest.Validate if the designated constraints aren't met.
type NullRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NullRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NullRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NullRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NullRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NullRequestValidationError) ErrorName() string { return "NullRequestValidationError" }

// Error satisfies the builtin error interface
func (e NullRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNullRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NullRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NullRequestValidationError{}

// Validate checks the field values on MFAActivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MFAActivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFAActivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MFAActivateRequestMultiError, or nil if none found.
func (m *MFAActivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MFAActivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := MFAActivateRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for Secret

	if len(errors) > 0 {
		return MFAActivateRequestMultiError(errors)
	}

	return nil
}

// MFAActivateRequestMultiError is an error wrapping multiple validation errors
// returned by MFAActivateRequest.ValidateAll() if the designated constraints
// aren't met.
type MFAActivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFAActivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFAActivateRequestMultiError) AllErrors() []error { return m }

// MFAActivateRequestValidationError is the validation error returned by
// MFAActivateRequest.Validate if the designated constraints aren't met.
type MFAActivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFAActivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFAActivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFAActivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFAActivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFAActivateRequestValidationError) ErrorName() string {
	return "MFAActivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MFAActivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFAActivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFAActivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFAActivateRequestValidationError{}

// Validate checks the field values on MFACancelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MFACancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFACancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MFACancelRequestMultiError, or nil if none found.
func (m *MFACancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MFACancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := MFACancelRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return MFACancelRequestMultiError(errors)
	}

	return nil
}

// MFACancelRequestMultiError is an error wrapping multiple validation errors
// returned by MFACancelRequest.ValidateAll() if the designated constraints
// aren't met.
type MFACancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFACancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFACancelRequestMultiError) AllErrors() []error { return m }

// MFACancelRequestValidationError is the validation error returned by
// MFACancelRequest.Validate if the designated constraints aren't met.
type MFACancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFACancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFACancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFACancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFACancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFACancelRequestValidationError) ErrorName() string { return "MFACancelRequestValidationError" }

// Error satisfies the builtin error interface
func (e MFACancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFACancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFACancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFACancelRequestValidationError{}

// Validate checks the field values on ShortMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShortMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShortMsgMultiError, or nil
// if none found.
func (m *ShortMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Bizid

	// no validation rules for Requestid

	if len(errors) > 0 {
		return ShortMsgMultiError(errors)
	}

	return nil
}

// ShortMsgMultiError is an error wrapping multiple validation errors returned
// by ShortMsg.ValidateAll() if the designated constraints aren't met.
type ShortMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortMsgMultiError) AllErrors() []error { return m }

// ShortMsgValidationError is the validation error returned by
// ShortMsg.Validate if the designated constraints aren't met.
type ShortMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortMsgValidationError) ErrorName() string { return "ShortMsgValidationError" }

// Error satisfies the builtin error interface
func (e ShortMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortMsgValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Userid

	// no validation rules for Username

	// no validation rules for Status

	// no validation rules for Email

	// no validation rules for Nickname

	// no validation rules for CreatedAt

	// no validation rules for Phone

	// no validation rules for MfaEnabled

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on MFA with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *MFA) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFA with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MFAMultiError, or nil if none found.
func (m *MFA) ValidateAll() error {
	return m.validate(true)
}

func (m *MFA) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Qrlink

	// no validation rules for Secret

	if len(errors) > 0 {
		return MFAMultiError(errors)
	}

	return nil
}

// MFAMultiError is an error wrapping multiple validation errors returned by
// MFA.ValidateAll() if the designated constraints aren't met.
type MFAMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFAMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFAMultiError) AllErrors() []error { return m }

// MFAValidationError is the validation error returned by MFA.Validate if the
// designated constraints aren't met.
type MFAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFAValidationError) ErrorName() string { return "MFAValidationError" }

// Error satisfies the builtin error interface
func (e MFAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFAValidationError{}

// Validate checks the field values on PingConnectReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingConnectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingConnectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingConnectReplyMultiError, or nil if none found.
func (m *PingConnectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PingConnectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return PingConnectReplyMultiError(errors)
	}

	return nil
}

// PingConnectReplyMultiError is an error wrapping multiple validation errors
// returned by PingConnectReply.ValidateAll() if the designated constraints
// aren't met.
type PingConnectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingConnectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingConnectReplyMultiError) AllErrors() []error { return m }

// PingConnectReplyValidationError is the validation error returned by
// PingConnectReply.Validate if the designated constraints aren't met.
type PingConnectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingConnectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingConnectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingConnectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingConnectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingConnectReplyValidationError) ErrorName() string { return "PingConnectReplyValidationError" }

// Error satisfies the builtin error interface
func (e PingConnectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingConnectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingConnectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingConnectReplyValidationError{}

// Validate checks the field values on SendShortMsgReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendShortMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendShortMsgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendShortMsgReplyMultiError, or nil if none found.
func (m *SendShortMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendShortMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendShortMsgReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendShortMsgReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendShortMsgReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendShortMsgReplyMultiError(errors)
	}

	return nil
}

// SendShortMsgReplyMultiError is an error wrapping multiple validation errors
// returned by SendShortMsgReply.ValidateAll() if the designated constraints
// aren't met.
type SendShortMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendShortMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendShortMsgReplyMultiError) AllErrors() []error { return m }

// SendShortMsgReplyValidationError is the validation error returned by
// SendShortMsgReply.Validate if the designated constraints aren't met.
type SendShortMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendShortMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendShortMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendShortMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendShortMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendShortMsgReplyValidationError) ErrorName() string {
	return "SendShortMsgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendShortMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendShortMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendShortMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendShortMsgReplyValidationError{}

// Validate checks the field values on ReBindPhoneReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReBindPhoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReBindPhoneReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReBindPhoneReplyMultiError, or nil if none found.
func (m *ReBindPhoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReBindPhoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ReBindPhoneReplyMultiError(errors)
	}

	return nil
}

// ReBindPhoneReplyMultiError is an error wrapping multiple validation errors
// returned by ReBindPhoneReply.ValidateAll() if the designated constraints
// aren't met.
type ReBindPhoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReBindPhoneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReBindPhoneReplyMultiError) AllErrors() []error { return m }

// ReBindPhoneReplyValidationError is the validation error returned by
// ReBindPhoneReply.Validate if the designated constraints aren't met.
type ReBindPhoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReBindPhoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReBindPhoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReBindPhoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReBindPhoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReBindPhoneReplyValidationError) ErrorName() string { return "ReBindPhoneReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReBindPhoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReBindPhoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReBindPhoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReBindPhoneReplyValidationError{}

// Validate checks the field values on RegisterUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserReplyMultiError, or nil if none found.
func (m *RegisterUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterUserReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterUserReplyMultiError(errors)
	}

	return nil
}

// RegisterUserReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterUserReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserReplyMultiError) AllErrors() []error { return m }

// RegisterUserReplyValidationError is the validation error returned by
// RegisterUserReply.Validate if the designated constraints aren't met.
type RegisterUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserReplyValidationError) ErrorName() string {
	return "RegisterUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserReplyValidationError{}

// Validate checks the field values on LoginUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginUserReplyMultiError,
// or nil if none found.
func (m *LoginUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginUserReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginUserReplyMultiError(errors)
	}

	return nil
}

// LoginUserReplyMultiError is an error wrapping multiple validation errors
// returned by LoginUserReply.ValidateAll() if the designated constraints
// aren't met.
type LoginUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginUserReplyMultiError) AllErrors() []error { return m }

// LoginUserReplyValidationError is the validation error returned by
// LoginUserReply.Validate if the designated constraints aren't met.
type LoginUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginUserReplyValidationError) ErrorName() string { return "LoginUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginUserReplyValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on MFAGetQRCodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MFAGetQRCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFAGetQRCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MFAGetQRCodeReplyMultiError, or nil if none found.
func (m *MFAGetQRCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MFAGetQRCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MFAGetQRCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MFAGetQRCodeReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MFAGetQRCodeReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MFAGetQRCodeReplyMultiError(errors)
	}

	return nil
}

// MFAGetQRCodeReplyMultiError is an error wrapping multiple validation errors
// returned by MFAGetQRCodeReply.ValidateAll() if the designated constraints
// aren't met.
type MFAGetQRCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFAGetQRCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFAGetQRCodeReplyMultiError) AllErrors() []error { return m }

// MFAGetQRCodeReplyValidationError is the validation error returned by
// MFAGetQRCodeReply.Validate if the designated constraints aren't met.
type MFAGetQRCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFAGetQRCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFAGetQRCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFAGetQRCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFAGetQRCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFAGetQRCodeReplyValidationError) ErrorName() string {
	return "MFAGetQRCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MFAGetQRCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFAGetQRCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFAGetQRCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFAGetQRCodeReplyValidationError{}

// Validate checks the field values on MFAActivateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MFAActivateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFAActivateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MFAActivateReplyMultiError, or nil if none found.
func (m *MFAActivateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MFAActivateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return MFAActivateReplyMultiError(errors)
	}

	return nil
}

// MFAActivateReplyMultiError is an error wrapping multiple validation errors
// returned by MFAActivateReply.ValidateAll() if the designated constraints
// aren't met.
type MFAActivateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFAActivateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFAActivateReplyMultiError) AllErrors() []error { return m }

// MFAActivateReplyValidationError is the validation error returned by
// MFAActivateReply.Validate if the designated constraints aren't met.
type MFAActivateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFAActivateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFAActivateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFAActivateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFAActivateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFAActivateReplyValidationError) ErrorName() string { return "MFAActivateReplyValidationError" }

// Error satisfies the builtin error interface
func (e MFAActivateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFAActivateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFAActivateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFAActivateReplyValidationError{}

// Validate checks the field values on MFACancelReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MFACancelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MFACancelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MFACancelReplyMultiError,
// or nil if none found.
func (m *MFACancelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MFACancelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return MFACancelReplyMultiError(errors)
	}

	return nil
}

// MFACancelReplyMultiError is an error wrapping multiple validation errors
// returned by MFACancelReply.ValidateAll() if the designated constraints
// aren't met.
type MFACancelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MFACancelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MFACancelReplyMultiError) AllErrors() []error { return m }

// MFACancelReplyValidationError is the validation error returned by
// MFACancelReply.Validate if the designated constraints aren't met.
type MFACancelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MFACancelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MFACancelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MFACancelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MFACancelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MFACancelReplyValidationError) ErrorName() string { return "MFACancelReplyValidationError" }

// Error satisfies the builtin error interface
func (e MFACancelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMFACancelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MFACancelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MFACancelReplyValidationError{}
