// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.5
// source: hollow/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUsersGetUser = "/user.v1.Users/GetUser"
const OperationUsersLogin = "/user.v1.Users/Login"
const OperationUsersMFAActivate = "/user.v1.Users/MFAActivate"
const OperationUsersMFACancel = "/user.v1.Users/MFACancel"
const OperationUsersMFAGetQRCode = "/user.v1.Users/MFAGetQRCode"
const OperationUsersPingConnect = "/user.v1.Users/PingConnect"
const OperationUsersreBindPhone = "/user.v1.Users/reBindPhone"
const OperationUsersRegister = "/user.v1.Users/Register"
const OperationUsersSendShortMsg = "/user.v1.Users/SendShortMsg"

type UsersHTTPServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	Login(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	MFAActivate(context.Context, *MFAActivateRequest) (*MFAActivateReply, error)
	MFACancel(context.Context, *MFACancelRequest) (*MFACancelReply, error)
	MFAGetQRCode(context.Context, *NullRequest) (*MFAGetQRCodeReply, error)
	PingConnect(context.Context, *PingConnectRequest) (*PingConnectReply, error)
	ReBindPhone(context.Context, *ReBindPhoneRequest) (*ReBindPhoneReply, error)
	Register(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	SendShortMsg(context.Context, *SendShortMsgRequest) (*SendShortMsgReply, error)
}

func RegisterUsersHTTPServer(s *http.Server, srv UsersHTTPServer) {
	r := s.Route("/")
	r.GET("/api/ping", _Users_PingConnect0_HTTP_Handler(srv))
	r.POST("/api/user/register/shortmsg", _Users_SendShortMsg0_HTTP_Handler(srv))
	r.POST("/api/user/rebind/phone", _Users_ReBindPhone0_HTTP_Handler(srv))
	r.POST("/api/user/register", _Users_Register0_HTTP_Handler(srv))
	r.POST("/api/user/login", _Users_Login0_HTTP_Handler(srv))
	r.GET("/api/user/info/{id}", _Users_GetUser0_HTTP_Handler(srv))
	r.GET("/api/user/mfa", _Users_MFAGetQRCode0_HTTP_Handler(srv))
	r.POST("/api/user/mfa", _Users_MFAActivate0_HTTP_Handler(srv))
	r.DELETE("/api/user/mfa", _Users_MFACancel0_HTTP_Handler(srv))
}

func _Users_PingConnect0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingConnectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersPingConnect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PingConnect(ctx, req.(*PingConnectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingConnectReply)
		return ctx.Result(200, reply)
	}
}

func _Users_SendShortMsg0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendShortMsgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersSendShortMsg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendShortMsg(ctx, req.(*SendShortMsgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendShortMsgReply)
		return ctx.Result(200, reply)
	}
}

func _Users_ReBindPhone0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReBindPhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersreBindPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReBindPhone(ctx, req.(*ReBindPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReBindPhoneReply)
		return ctx.Result(200, reply)
	}
}

func _Users_Register0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserReply)
		return ctx.Result(200, reply)
	}
}

func _Users_Login0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserReply)
		return ctx.Result(200, reply)
	}
}

func _Users_GetUser0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _Users_MFAGetQRCode0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NullRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersMFAGetQRCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MFAGetQRCode(ctx, req.(*NullRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MFAGetQRCodeReply)
		return ctx.Result(200, reply)
	}
}

func _Users_MFAActivate0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MFAActivateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersMFAActivate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MFAActivate(ctx, req.(*MFAActivateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MFAActivateReply)
		return ctx.Result(200, reply)
	}
}

func _Users_MFACancel0_HTTP_Handler(srv UsersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MFACancelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUsersMFACancel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MFACancel(ctx, req.(*MFACancelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MFACancelReply)
		return ctx.Result(200, reply)
	}
}

type UsersHTTPClient interface {
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	Login(ctx context.Context, req *LoginUserRequest, opts ...http.CallOption) (rsp *LoginUserReply, err error)
	MFAActivate(ctx context.Context, req *MFAActivateRequest, opts ...http.CallOption) (rsp *MFAActivateReply, err error)
	MFACancel(ctx context.Context, req *MFACancelRequest, opts ...http.CallOption) (rsp *MFACancelReply, err error)
	MFAGetQRCode(ctx context.Context, req *NullRequest, opts ...http.CallOption) (rsp *MFAGetQRCodeReply, err error)
	PingConnect(ctx context.Context, req *PingConnectRequest, opts ...http.CallOption) (rsp *PingConnectReply, err error)
	ReBindPhone(ctx context.Context, req *ReBindPhoneRequest, opts ...http.CallOption) (rsp *ReBindPhoneReply, err error)
	Register(ctx context.Context, req *RegisterUserRequest, opts ...http.CallOption) (rsp *RegisterUserReply, err error)
	SendShortMsg(ctx context.Context, req *SendShortMsgRequest, opts ...http.CallOption) (rsp *SendShortMsgReply, err error)
}

type UsersHTTPClientImpl struct {
	cc *http.Client
}

func NewUsersHTTPClient(client *http.Client) UsersHTTPClient {
	return &UsersHTTPClientImpl{client}
}

func (c *UsersHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/api/user/info/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUsersGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) Login(ctx context.Context, in *LoginUserRequest, opts ...http.CallOption) (*LoginUserReply, error) {
	var out LoginUserReply
	pattern := "/api/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) MFAActivate(ctx context.Context, in *MFAActivateRequest, opts ...http.CallOption) (*MFAActivateReply, error) {
	var out MFAActivateReply
	pattern := "/api/user/mfa"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersMFAActivate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) MFACancel(ctx context.Context, in *MFACancelRequest, opts ...http.CallOption) (*MFACancelReply, error) {
	var out MFACancelReply
	pattern := "/api/user/mfa"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUsersMFACancel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) MFAGetQRCode(ctx context.Context, in *NullRequest, opts ...http.CallOption) (*MFAGetQRCodeReply, error) {
	var out MFAGetQRCodeReply
	pattern := "/api/user/mfa"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUsersMFAGetQRCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) PingConnect(ctx context.Context, in *PingConnectRequest, opts ...http.CallOption) (*PingConnectReply, error) {
	var out PingConnectReply
	pattern := "/api/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUsersPingConnect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) ReBindPhone(ctx context.Context, in *ReBindPhoneRequest, opts ...http.CallOption) (*ReBindPhoneReply, error) {
	var out ReBindPhoneReply
	pattern := "/api/user/rebind/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersreBindPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) Register(ctx context.Context, in *RegisterUserRequest, opts ...http.CallOption) (*RegisterUserReply, error) {
	var out RegisterUserReply
	pattern := "/api/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UsersHTTPClientImpl) SendShortMsg(ctx context.Context, in *SendShortMsgRequest, opts ...http.CallOption) (*SendShortMsgReply, error) {
	var out SendShortMsgReply
	pattern := "/api/user/register/shortmsg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUsersSendShortMsg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
