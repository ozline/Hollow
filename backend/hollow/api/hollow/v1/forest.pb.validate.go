// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: hollow/v1/forest.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushLeafRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushLeafRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushLeafRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushLeafRequestMultiError, or nil if none found.
func (m *PushLeafRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushLeafRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PushLeafRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := PushLeafRequestValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 140 {
		err := PushLeafRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PushLeafRequestMultiError(errors)
	}

	return nil
}

// PushLeafRequestMultiError is an error wrapping multiple validation errors
// returned by PushLeafRequest.ValidateAll() if the designated constraints
// aren't met.
type PushLeafRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushLeafRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushLeafRequestMultiError) AllErrors() []error { return m }

// PushLeafRequestValidationError is the validation error returned by
// PushLeafRequest.Validate if the designated constraints aren't met.
type PushLeafRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushLeafRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushLeafRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushLeafRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushLeafRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushLeafRequestValidationError) ErrorName() string { return "PushLeafRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushLeafRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushLeafRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushLeafRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushLeafRequestValidationError{}

var _PushLeafRequest_Status_InLookup = map[int64]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on DeleteLeafRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeafRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeafRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeafRequestMultiError, or nil if none found.
func (m *DeleteLeafRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeafRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteLeafRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLeafRequestMultiError(errors)
	}

	return nil
}

// DeleteLeafRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLeafRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLeafRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeafRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeafRequestMultiError) AllErrors() []error { return m }

// DeleteLeafRequestValidationError is the validation error returned by
// DeleteLeafRequest.Validate if the designated constraints aren't met.
type DeleteLeafRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeafRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeafRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeafRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeafRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeafRequestValidationError) ErrorName() string {
	return "DeleteLeafRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLeafRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeafRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeafRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeafRequestValidationError{}

// Validate checks the field values on GetLeafsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLeafsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeafsRequestMultiError, or nil if none found.
func (m *GetLeafsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := GetLeafsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPagesize() < 1 {
		err := GetLeafsRequestValidationError{
			field:  "Pagesize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLeafsRequestMultiError(errors)
	}

	return nil
}

// GetLeafsRequestMultiError is an error wrapping multiple validation errors
// returned by GetLeafsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLeafsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafsRequestMultiError) AllErrors() []error { return m }

// GetLeafsRequestValidationError is the validation error returned by
// GetLeafsRequest.Validate if the designated constraints aren't met.
type GetLeafsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafsRequestValidationError) ErrorName() string { return "GetLeafsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLeafsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafsRequestValidationError{}

// Validate checks the field values on GetLeafDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeafDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeafDetailRequestMultiError, or nil if none found.
func (m *GetLeafDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 1 {
		err := GetLeafDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLeafDetailRequestMultiError(errors)
	}

	return nil
}

// GetLeafDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetLeafDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLeafDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafDetailRequestMultiError) AllErrors() []error { return m }

// GetLeafDetailRequestValidationError is the validation error returned by
// GetLeafDetailRequest.Validate if the designated constraints aren't met.
type GetLeafDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafDetailRequestValidationError) ErrorName() string {
	return "GetLeafDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeafDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafDetailRequestValidationError{}

// Validate checks the field values on CommentLeafRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentLeafRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentLeafRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentLeafRequestMultiError, or nil if none found.
func (m *CommentLeafRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentLeafRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoot() < 0 {
		err := CommentLeafRequestValidationError{
			field:  "Root",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CommentLeafRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := CommentLeafRequestValidationError{
			field:  "Status",
			reason: "value must be in list [0 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 140 {
		err := CommentLeafRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFather() < 0 {
		err := CommentLeafRequestValidationError{
			field:  "Father",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommentLeafRequestMultiError(errors)
	}

	return nil
}

// CommentLeafRequestMultiError is an error wrapping multiple validation errors
// returned by CommentLeafRequest.ValidateAll() if the designated constraints
// aren't met.
type CommentLeafRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentLeafRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentLeafRequestMultiError) AllErrors() []error { return m }

// CommentLeafRequestValidationError is the validation error returned by
// CommentLeafRequest.Validate if the designated constraints aren't met.
type CommentLeafRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentLeafRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentLeafRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentLeafRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentLeafRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentLeafRequestValidationError) ErrorName() string {
	return "CommentLeafRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentLeafRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentLeafRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentLeafRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentLeafRequestValidationError{}

var _CommentLeafRequest_Status_InLookup = map[int64]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsRequestMultiError, or nil if none found.
func (m *GetCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoot() < 0 {
		err := GetCommentsRequestValidationError{
			field:  "Root",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 1 {
		err := GetCommentsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPagesize() < 1 {
		err := GetCommentsRequestValidationError{
			field:  "Pagesize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFather() < 0 {
		err := GetCommentsRequestValidationError{
			field:  "Father",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommentsRequestMultiError(errors)
	}

	return nil
}

// GetCommentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsRequestMultiError) AllErrors() []error { return m }

// GetCommentsRequestValidationError is the validation error returned by
// GetCommentsRequest.Validate if the designated constraints aren't met.
type GetCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsRequestValidationError) ErrorName() string {
	return "GetCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsRequestValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteCommentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentRequestMultiError, or nil if none found.
func (m *LikeCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := LikeCommentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LikeCommentRequestMultiError(errors)
	}

	return nil
}

// LikeCommentRequestMultiError is an error wrapping multiple validation errors
// returned by LikeCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentRequestMultiError) AllErrors() []error { return m }

// LikeCommentRequestValidationError is the validation error returned by
// LikeCommentRequest.Validate if the designated constraints aren't met.
type LikeCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentRequestValidationError) ErrorName() string {
	return "LikeCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LikeCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentRequestValidationError{}

// Validate checks the field values on Leaf with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Leaf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Leaf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LeafMultiError, or nil if none found.
func (m *Leaf) ValidateAll() error {
	return m.validate(true)
}

func (m *Leaf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Owner

	// no validation rules for Message

	// no validation rules for CreatedAt

	// no validation rules for Status

	// no validation rules for Liked

	if len(errors) > 0 {
		return LeafMultiError(errors)
	}

	return nil
}

// LeafMultiError is an error wrapping multiple validation errors returned by
// Leaf.ValidateAll() if the designated constraints aren't met.
type LeafMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeafMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeafMultiError) AllErrors() []error { return m }

// LeafValidationError is the validation error returned by Leaf.Validate if the
// designated constraints aren't met.
type LeafValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeafValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeafValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeafValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeafValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeafValidationError) ErrorName() string { return "LeafValidationError" }

// Error satisfies the builtin error interface
func (e LeafValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeafValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeafValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Owner

	// no validation rules for Root

	// no validation rules for Father

	// no validation rules for CreatedAt

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Liked

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on MultipleLeafReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MultipleLeafReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleLeafReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleLeafReplyMultiError, or nil if none found.
func (m *MultipleLeafReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleLeafReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultipleLeafReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultipleLeafReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultipleLeafReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return MultipleLeafReplyMultiError(errors)
	}

	return nil
}

// MultipleLeafReplyMultiError is an error wrapping multiple validation errors
// returned by MultipleLeafReply.ValidateAll() if the designated constraints
// aren't met.
type MultipleLeafReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleLeafReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleLeafReplyMultiError) AllErrors() []error { return m }

// MultipleLeafReplyValidationError is the validation error returned by
// MultipleLeafReply.Validate if the designated constraints aren't met.
type MultipleLeafReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleLeafReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleLeafReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleLeafReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleLeafReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleLeafReplyValidationError) ErrorName() string {
	return "MultipleLeafReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleLeafReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleLeafReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleLeafReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleLeafReplyValidationError{}

// Validate checks the field values on MultipleCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultipleCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultipleCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultipleCommentReplyMultiError, or nil if none found.
func (m *MultipleCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MultipleCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MultipleCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MultipleCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultipleCommentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return MultipleCommentReplyMultiError(errors)
	}

	return nil
}

// MultipleCommentReplyMultiError is an error wrapping multiple validation
// errors returned by MultipleCommentReply.ValidateAll() if the designated
// constraints aren't met.
type MultipleCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultipleCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultipleCommentReplyMultiError) AllErrors() []error { return m }

// MultipleCommentReplyValidationError is the validation error returned by
// MultipleCommentReply.Validate if the designated constraints aren't met.
type MultipleCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultipleCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultipleCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultipleCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultipleCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultipleCommentReplyValidationError) ErrorName() string {
	return "MultipleCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MultipleCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultipleCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultipleCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultipleCommentReplyValidationError{}

// Validate checks the field values on PushLeafReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushLeafReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushLeafReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushLeafReplyMultiError, or
// nil if none found.
func (m *PushLeafReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PushLeafReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return PushLeafReplyMultiError(errors)
	}

	return nil
}

// PushLeafReplyMultiError is an error wrapping multiple validation errors
// returned by PushLeafReply.ValidateAll() if the designated constraints
// aren't met.
type PushLeafReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushLeafReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushLeafReplyMultiError) AllErrors() []error { return m }

// PushLeafReplyValidationError is the validation error returned by
// PushLeafReply.Validate if the designated constraints aren't met.
type PushLeafReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushLeafReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushLeafReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushLeafReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushLeafReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushLeafReplyValidationError) ErrorName() string { return "PushLeafReplyValidationError" }

// Error satisfies the builtin error interface
func (e PushLeafReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushLeafReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushLeafReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushLeafReplyValidationError{}

// Validate checks the field values on DeleteLeafReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteLeafReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLeafReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLeafReplyMultiError, or nil if none found.
func (m *DeleteLeafReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLeafReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteLeafReplyMultiError(errors)
	}

	return nil
}

// DeleteLeafReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteLeafReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteLeafReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLeafReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLeafReplyMultiError) AllErrors() []error { return m }

// DeleteLeafReplyValidationError is the validation error returned by
// DeleteLeafReply.Validate if the designated constraints aren't met.
type DeleteLeafReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLeafReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLeafReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLeafReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLeafReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLeafReplyValidationError) ErrorName() string { return "DeleteLeafReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteLeafReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLeafReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLeafReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLeafReplyValidationError{}

// Validate checks the field values on GetLeafsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLeafsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLeafsReplyMultiError, or
// nil if none found.
func (m *GetLeafsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeafsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeafsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeafsReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLeafsReplyMultiError(errors)
	}

	return nil
}

// GetLeafsReplyMultiError is an error wrapping multiple validation errors
// returned by GetLeafsReply.ValidateAll() if the designated constraints
// aren't met.
type GetLeafsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafsReplyMultiError) AllErrors() []error { return m }

// GetLeafsReplyValidationError is the validation error returned by
// GetLeafsReply.Validate if the designated constraints aren't met.
type GetLeafsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafsReplyValidationError) ErrorName() string { return "GetLeafsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetLeafsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafsReplyValidationError{}

// Validate checks the field values on GetLeafDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeafDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeafDetailReplyMultiError, or nil if none found.
func (m *GetLeafDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLeafDetailReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLeafDetailReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLeafDetailReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLeafDetailReplyMultiError(errors)
	}

	return nil
}

// GetLeafDetailReplyMultiError is an error wrapping multiple validation errors
// returned by GetLeafDetailReply.ValidateAll() if the designated constraints
// aren't met.
type GetLeafDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafDetailReplyMultiError) AllErrors() []error { return m }

// GetLeafDetailReplyValidationError is the validation error returned by
// GetLeafDetailReply.Validate if the designated constraints aren't met.
type GetLeafDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafDetailReplyValidationError) ErrorName() string {
	return "GetLeafDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeafDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafDetailReplyValidationError{}

// Validate checks the field values on CommentLeafRePly with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommentLeafRePly) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentLeafRePly with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentLeafRePlyMultiError, or nil if none found.
func (m *CommentLeafRePly) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentLeafRePly) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return CommentLeafRePlyMultiError(errors)
	}

	return nil
}

// CommentLeafRePlyMultiError is an error wrapping multiple validation errors
// returned by CommentLeafRePly.ValidateAll() if the designated constraints
// aren't met.
type CommentLeafRePlyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentLeafRePlyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentLeafRePlyMultiError) AllErrors() []error { return m }

// CommentLeafRePlyValidationError is the validation error returned by
// CommentLeafRePly.Validate if the designated constraints aren't met.
type CommentLeafRePlyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentLeafRePlyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentLeafRePlyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentLeafRePlyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentLeafRePlyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentLeafRePlyValidationError) ErrorName() string { return "CommentLeafRePlyValidationError" }

// Error satisfies the builtin error interface
func (e CommentLeafRePlyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentLeafRePly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentLeafRePlyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentLeafRePlyValidationError{}

// Validate checks the field values on GetCommentsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsReplyMultiError, or nil if none found.
func (m *GetCommentsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentsReplyValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentsReplyValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentsReplyMultiError(errors)
	}

	return nil
}

// GetCommentsReplyMultiError is an error wrapping multiple validation errors
// returned by GetCommentsReply.ValidateAll() if the designated constraints
// aren't met.
type GetCommentsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsReplyMultiError) AllErrors() []error { return m }

// GetCommentsReplyValidationError is the validation error returned by
// GetCommentsReply.Validate if the designated constraints aren't met.
type GetCommentsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsReplyValidationError) ErrorName() string { return "GetCommentsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCommentsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsReplyValidationError{}

// Validate checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentReplyMultiError, or nil if none found.
func (m *DeleteCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DeleteCommentReplyMultiError(errors)
	}

	return nil
}

// DeleteCommentReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteCommentReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentReplyMultiError) AllErrors() []error { return m }

// DeleteCommentReplyValidationError is the validation error returned by
// DeleteCommentReply.Validate if the designated constraints aren't met.
type DeleteCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentReplyValidationError) ErrorName() string {
	return "DeleteCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentReplyValidationError{}

// Validate checks the field values on LikeCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeCommentReplyMultiError, or nil if none found.
func (m *LikeCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return LikeCommentReplyMultiError(errors)
	}

	return nil
}

// LikeCommentReplyMultiError is an error wrapping multiple validation errors
// returned by LikeCommentReply.ValidateAll() if the designated constraints
// aren't met.
type LikeCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeCommentReplyMultiError) AllErrors() []error { return m }

// LikeCommentReplyValidationError is the validation error returned by
// LikeCommentReply.Validate if the designated constraints aren't met.
type LikeCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeCommentReplyValidationError) ErrorName() string { return "LikeCommentReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikeCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeCommentReplyValidationError{}
