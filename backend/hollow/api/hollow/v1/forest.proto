syntax = "proto3";

package forest.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "hollow/api/forest/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.forest.v1";
option java_outer_classname = "ForestProtoV1";

// The greeting service definition.
service Forests {

    // Push a Leaf
    rpc PushLeaf (PushLeafRequest) returns (PushLeafReply) {
        option (google.api.http) = {
            post: "/api/forest",
            body: "*",
        };
    }

    // Delete a Leaf
    rpc DeleteLeaf (DeleteLeafRequest) returns (DeleteLeafReply) {
        option (google.api.http) = {
            delete: "/api/forest/{id}",
        };
    }

    // Get Leafs
    rpc GetForest (GetLeafsRequest) returns (GetLeafsReply) {
        option (google.api.http) = {
            get: "/api/forest/all",
        };
    }

    // Get Leaf Detail
    rpc GetLeafDetail (GetLeafDetailRequest) returns (GetLeafDetailReply) {
        option (google.api.http) = {
            get: "/api/forest/{id}",
        };
    }

    // Comment Leaf
    rpc Comment (CommentLeafRequest) returns (CommentLeafRePly) {
        option (google.api.http) = {
            post: "/api/forest/comments/{root}",
            body: "*",
        };
    }

    // Get Comments
    rpc GetComments (GetCommentsRequest) returns (GetCommentsReply) {
        option (google.api.http) = {
            get: "/api/forest/comments/{root}",
        };
    }

    // Delete Comment
    rpc DeleteComment (DeleteCommentRequest) returns (DeleteCommentReply) {
        option (google.api.http) = {
            delete: "/api/forest/comments/{id}",
        };
    }

    // // Like Comment
    // rpc LikeComment (LikeCommentRequest) returns (LikeCommentReply) {
    //     option (google.api.http) = {
    //         put: "/api/forest/comments/{id}",
    //     };
    // }
}
//Request Messages

message PushLeafRequest{
    int64 status = 1 [(validate.rules).int64 = {in: [0,1]}];   //0=匿名 1=实名
    string message = 2 [(validate.rules).string = {min_len: 1, max_len: 140}];
}

message DeleteLeafRequest{
    int64 id = 1 [(validate.rules).int64 = {gt: 1}];
}

message GetLeafsRequest{
    int64 page = 1 [(validate.rules).int64 = {gte: 1}];
    int64 pagesize = 2 [(validate.rules).int64 = {gte: 1}];
}

message GetLeafDetailRequest{
    int64 id = 1 [(validate.rules).int64 = {gt: 1}];
}

message CommentLeafRequest{
    int64 root = 1 [(validate.rules).int64 = {gte: 0}];
    int64 status = 2 [(validate.rules).int64 = {in: [0,1]}];    //0=匿名 1=实名
    string message = 3 [(validate.rules).string = {min_len: 1, max_len: 140}];
    int64 father = 4 [(validate.rules).int64 = {gte: 0}];       //可空
}

message GetCommentsRequest{
    int64 root = 1 [(validate.rules).int64 = {gte: 0}];
    int64 page = 2 [(validate.rules).int64 = {gte: 1}];
    int64 pagesize = 3 [(validate.rules).int64 = {gte: 1}];
    int64 father = 4 [(validate.rules).int64 = {gte: 0}]; //可空
}

message DeleteCommentRequest{
    int64 id = 2 [(validate.rules).int64 = {gte: 0}];
}

//Reply Messages

message Leaf{
    int64 id = 1;
    int64 owner = 2;
    string message = 3;
    int64 created_at = 4;
    int64 status = 5;
    int64 liked = 6;
}

message Comment{
    int64 id = 1;
    int64 owner = 2;
    int64 root = 3;
    int64 father = 4;
    int64 created_at = 5;
    int64 status = 6;
    string message = 7;
    int64 liked = 8;
}

message MultipleLeafReply{
    repeated Leaf list = 1;
    int64 total = 2;
}

message MultipleCommentReply{
    repeated Comment list = 1;
    int64 total = 2;
}

message PushLeafReply{
    int64 code = 1;
    string msg = 2;
}

message DeleteLeafReply{
    int64 code = 1;
    string msg = 2;
}

message GetLeafsReply{
    int64 code = 1;
    string msg = 2;
    MultipleLeafReply data = 3;
}

message GetLeafDetailReply{
    int64 code = 1;
    string msg = 2;
    Leaf data = 3;
}

message CommentLeafRePly{
    int64 code = 1;
    string msg = 2;
}

message GetCommentsReply{
    int64 code = 1;
    string msg = 2;
    MultipleCommentReply data = 3;
}

message DeleteCommentReply{
    int64 code = 1;
    string msg = 2;
}