// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: hollow/v1/forest.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForestsClient is the client API for Forests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForestsClient interface {
	// Push a Leaf
	PushLeaf(ctx context.Context, in *PushLeafRequest, opts ...grpc.CallOption) (*PushLeafReply, error)
	// Delete a Leaf
	DeleteLeaf(ctx context.Context, in *DeleteLeafRequest, opts ...grpc.CallOption) (*DeleteLeafReply, error)
	// Get Leafs
	GetForest(ctx context.Context, in *GetLeafsRequest, opts ...grpc.CallOption) (*GetLeafsReply, error)
	// Get Leaf Detail
	GetLeafDetail(ctx context.Context, in *GetLeafDetailRequest, opts ...grpc.CallOption) (*GetLeafDetailReply, error)
	// Comment Leaf
	Comment(ctx context.Context, in *CommentLeafRequest, opts ...grpc.CallOption) (*CommentLeafRePly, error)
	// Get Comments
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsReply, error)
	// Delete Comment
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error)
	// Like Comment
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentReply, error)
	// Report
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
	// GetMyReport
	GetReportList(ctx context.Context, in *GetReportListRequest, opts ...grpc.CallOption) (*GetReportListReply, error)
	// [Admin] UpdateReport
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportReply, error)
	// [Admin] UpdateCommentStatus
	UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusRequest, opts ...grpc.CallOption) (*UpdateCommentStatusReply, error)
	// [Admin] UpdateLeafStatus
	UpdateLeafStatus(ctx context.Context, in *UpdateLeafStatusRequest, opts ...grpc.CallOption) (*UpdateLeafStatusReply, error)
}

type forestsClient struct {
	cc grpc.ClientConnInterface
}

func NewForestsClient(cc grpc.ClientConnInterface) ForestsClient {
	return &forestsClient{cc}
}

func (c *forestsClient) PushLeaf(ctx context.Context, in *PushLeafRequest, opts ...grpc.CallOption) (*PushLeafReply, error) {
	out := new(PushLeafReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/PushLeaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) DeleteLeaf(ctx context.Context, in *DeleteLeafRequest, opts ...grpc.CallOption) (*DeleteLeafReply, error) {
	out := new(DeleteLeafReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/DeleteLeaf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) GetForest(ctx context.Context, in *GetLeafsRequest, opts ...grpc.CallOption) (*GetLeafsReply, error) {
	out := new(GetLeafsReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/GetForest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) GetLeafDetail(ctx context.Context, in *GetLeafDetailRequest, opts ...grpc.CallOption) (*GetLeafDetailReply, error) {
	out := new(GetLeafDetailReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/GetLeafDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) Comment(ctx context.Context, in *CommentLeafRequest, opts ...grpc.CallOption) (*CommentLeafRePly, error) {
	out := new(CommentLeafRePly)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsReply, error) {
	out := new(GetCommentsReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error) {
	out := new(DeleteCommentReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentReply, error) {
	out := new(LikeCommentReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/LikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) GetReportList(ctx context.Context, in *GetReportListRequest, opts ...grpc.CallOption) (*GetReportListReply, error) {
	out := new(GetReportListReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/GetReportList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*UpdateReportReply, error) {
	out := new(UpdateReportReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/UpdateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusRequest, opts ...grpc.CallOption) (*UpdateCommentStatusReply, error) {
	out := new(UpdateCommentStatusReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/UpdateCommentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forestsClient) UpdateLeafStatus(ctx context.Context, in *UpdateLeafStatusRequest, opts ...grpc.CallOption) (*UpdateLeafStatusReply, error) {
	out := new(UpdateLeafStatusReply)
	err := c.cc.Invoke(ctx, "/forest.v1.Forests/UpdateLeafStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForestsServer is the server API for Forests service.
// All implementations must embed UnimplementedForestsServer
// for forward compatibility
type ForestsServer interface {
	// Push a Leaf
	PushLeaf(context.Context, *PushLeafRequest) (*PushLeafReply, error)
	// Delete a Leaf
	DeleteLeaf(context.Context, *DeleteLeafRequest) (*DeleteLeafReply, error)
	// Get Leafs
	GetForest(context.Context, *GetLeafsRequest) (*GetLeafsReply, error)
	// Get Leaf Detail
	GetLeafDetail(context.Context, *GetLeafDetailRequest) (*GetLeafDetailReply, error)
	// Comment Leaf
	Comment(context.Context, *CommentLeafRequest) (*CommentLeafRePly, error)
	// Get Comments
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsReply, error)
	// Delete Comment
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)
	// Like Comment
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	// Report
	Report(context.Context, *ReportRequest) (*ReportReply, error)
	// GetMyReport
	GetReportList(context.Context, *GetReportListRequest) (*GetReportListReply, error)
	// [Admin] UpdateReport
	UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportReply, error)
	// [Admin] UpdateCommentStatus
	UpdateCommentStatus(context.Context, *UpdateCommentStatusRequest) (*UpdateCommentStatusReply, error)
	// [Admin] UpdateLeafStatus
	UpdateLeafStatus(context.Context, *UpdateLeafStatusRequest) (*UpdateLeafStatusReply, error)
	mustEmbedUnimplementedForestsServer()
}

// UnimplementedForestsServer must be embedded to have forward compatible implementations.
type UnimplementedForestsServer struct {
}

func (UnimplementedForestsServer) PushLeaf(context.Context, *PushLeafRequest) (*PushLeafReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushLeaf not implemented")
}
func (UnimplementedForestsServer) DeleteLeaf(context.Context, *DeleteLeafRequest) (*DeleteLeafReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaf not implemented")
}
func (UnimplementedForestsServer) GetForest(context.Context, *GetLeafsRequest) (*GetLeafsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForest not implemented")
}
func (UnimplementedForestsServer) GetLeafDetail(context.Context, *GetLeafDetailRequest) (*GetLeafDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeafDetail not implemented")
}
func (UnimplementedForestsServer) Comment(context.Context, *CommentLeafRequest) (*CommentLeafRePly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedForestsServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedForestsServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedForestsServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedForestsServer) Report(context.Context, *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedForestsServer) GetReportList(context.Context, *GetReportListRequest) (*GetReportListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportList not implemented")
}
func (UnimplementedForestsServer) UpdateReport(context.Context, *UpdateReportRequest) (*UpdateReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (UnimplementedForestsServer) UpdateCommentStatus(context.Context, *UpdateCommentStatusRequest) (*UpdateCommentStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentStatus not implemented")
}
func (UnimplementedForestsServer) UpdateLeafStatus(context.Context, *UpdateLeafStatusRequest) (*UpdateLeafStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeafStatus not implemented")
}
func (UnimplementedForestsServer) mustEmbedUnimplementedForestsServer() {}

// UnsafeForestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForestsServer will
// result in compilation errors.
type UnsafeForestsServer interface {
	mustEmbedUnimplementedForestsServer()
}

func RegisterForestsServer(s grpc.ServiceRegistrar, srv ForestsServer) {
	s.RegisterService(&Forests_ServiceDesc, srv)
}

func _Forests_PushLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).PushLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/PushLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).PushLeaf(ctx, req.(*PushLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_DeleteLeaf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).DeleteLeaf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/DeleteLeaf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).DeleteLeaf(ctx, req.(*DeleteLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_GetForest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeafsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).GetForest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/GetForest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).GetForest(ctx, req.(*GetLeafsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_GetLeafDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeafDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).GetLeafDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/GetLeafDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).GetLeafDetail(ctx, req.(*GetLeafDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentLeafRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).Comment(ctx, req.(*CommentLeafRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/LikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_GetReportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).GetReportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/GetReportList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).GetReportList(ctx, req.(*GetReportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/UpdateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_UpdateCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).UpdateCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/UpdateCommentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).UpdateCommentStatus(ctx, req.(*UpdateCommentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forests_UpdateLeafStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeafStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForestsServer).UpdateLeafStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forest.v1.Forests/UpdateLeafStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForestsServer).UpdateLeafStatus(ctx, req.(*UpdateLeafStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forests_ServiceDesc is the grpc.ServiceDesc for Forests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forest.v1.Forests",
	HandlerType: (*ForestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushLeaf",
			Handler:    _Forests_PushLeaf_Handler,
		},
		{
			MethodName: "DeleteLeaf",
			Handler:    _Forests_DeleteLeaf_Handler,
		},
		{
			MethodName: "GetForest",
			Handler:    _Forests_GetForest_Handler,
		},
		{
			MethodName: "GetLeafDetail",
			Handler:    _Forests_GetLeafDetail_Handler,
		},
		{
			MethodName: "Comment",
			Handler:    _Forests_Comment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Forests_GetComments_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Forests_DeleteComment_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Forests_LikeComment_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Forests_Report_Handler,
		},
		{
			MethodName: "GetReportList",
			Handler:    _Forests_GetReportList_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _Forests_UpdateReport_Handler,
		},
		{
			MethodName: "UpdateCommentStatus",
			Handler:    _Forests_UpdateCommentStatus_Handler,
		},
		{
			MethodName: "UpdateLeafStatus",
			Handler:    _Forests_UpdateLeafStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hollow/v1/forest.proto",
}
