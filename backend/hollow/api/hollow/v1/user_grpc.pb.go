// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: hollow/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	// 测试连通性
	PingConnect(ctx context.Context, in *PingConnectRequest, opts ...grpc.CallOption) (*PingConnectReply, error)
	// 发送手机验证码
	SendShortMsg(ctx context.Context, in *SendShortMsgRequest, opts ...grpc.CallOption) (*SendShortMsgReply, error)
	ReBindPhone(ctx context.Context, in *ReBindPhoneRequest, opts ...grpc.CallOption) (*ReBindPhoneReply, error)
	// 注册
	Register(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error)
	// 登录
	Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error)
	// 获取用户资料
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	// MFA获取秘钥二维码
	MFAGetQRCode(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*MFAGetQRCodeReply, error)
	// MFA激活
	MFAActivate(ctx context.Context, in *MFAActivateRequest, opts ...grpc.CallOption) (*MFAActivateReply, error)
	// MFA解绑
	MFACancel(ctx context.Context, in *MFACancelRequest, opts ...grpc.CallOption) (*MFACancelReply, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) PingConnect(ctx context.Context, in *PingConnectRequest, opts ...grpc.CallOption) (*PingConnectReply, error) {
	out := new(PingConnectReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/PingConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SendShortMsg(ctx context.Context, in *SendShortMsgRequest, opts ...grpc.CallOption) (*SendShortMsgReply, error) {
	out := new(SendShortMsgReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/SendShortMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ReBindPhone(ctx context.Context, in *ReBindPhoneRequest, opts ...grpc.CallOption) (*ReBindPhoneReply, error) {
	out := new(ReBindPhoneReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/reBindPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Register(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error) {
	out := new(RegisterUserReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error) {
	out := new(LoginUserReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) MFAGetQRCode(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*MFAGetQRCodeReply, error) {
	out := new(MFAGetQRCodeReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/MFAGetQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) MFAActivate(ctx context.Context, in *MFAActivateRequest, opts ...grpc.CallOption) (*MFAActivateReply, error) {
	out := new(MFAActivateReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/MFAActivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) MFACancel(ctx context.Context, in *MFACancelRequest, opts ...grpc.CallOption) (*MFACancelReply, error) {
	out := new(MFACancelReply)
	err := c.cc.Invoke(ctx, "/user.v1.Users/MFACancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	// 测试连通性
	PingConnect(context.Context, *PingConnectRequest) (*PingConnectReply, error)
	// 发送手机验证码
	SendShortMsg(context.Context, *SendShortMsgRequest) (*SendShortMsgReply, error)
	ReBindPhone(context.Context, *ReBindPhoneRequest) (*ReBindPhoneReply, error)
	// 注册
	Register(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	// 登录
	Login(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	// 获取用户资料
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	// MFA获取秘钥二维码
	MFAGetQRCode(context.Context, *NullRequest) (*MFAGetQRCodeReply, error)
	// MFA激活
	MFAActivate(context.Context, *MFAActivateRequest) (*MFAActivateReply, error)
	// MFA解绑
	MFACancel(context.Context, *MFACancelRequest) (*MFACancelReply, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) PingConnect(context.Context, *PingConnectRequest) (*PingConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingConnect not implemented")
}
func (UnimplementedUsersServer) SendShortMsg(context.Context, *SendShortMsgRequest) (*SendShortMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShortMsg not implemented")
}
func (UnimplementedUsersServer) ReBindPhone(context.Context, *ReBindPhoneRequest) (*ReBindPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReBindPhone not implemented")
}
func (UnimplementedUsersServer) Register(context.Context, *RegisterUserRequest) (*RegisterUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsersServer) Login(context.Context, *LoginUserRequest) (*LoginUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) MFAGetQRCode(context.Context, *NullRequest) (*MFAGetQRCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAGetQRCode not implemented")
}
func (UnimplementedUsersServer) MFAActivate(context.Context, *MFAActivateRequest) (*MFAActivateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFAActivate not implemented")
}
func (UnimplementedUsersServer) MFACancel(context.Context, *MFACancelRequest) (*MFACancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MFACancel not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_PingConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).PingConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/PingConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).PingConnect(ctx, req.(*PingConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SendShortMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendShortMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SendShortMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/SendShortMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SendShortMsg(ctx, req.(*SendShortMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ReBindPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReBindPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ReBindPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/reBindPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ReBindPhone(ctx, req.(*ReBindPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Register(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Login(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_MFAGetQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).MFAGetQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/MFAGetQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).MFAGetQRCode(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_MFAActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFAActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).MFAActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/MFAActivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).MFAActivate(ctx, req.(*MFAActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_MFACancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFACancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).MFACancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.Users/MFACancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).MFACancel(ctx, req.(*MFACancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingConnect",
			Handler:    _Users_PingConnect_Handler,
		},
		{
			MethodName: "SendShortMsg",
			Handler:    _Users_SendShortMsg_Handler,
		},
		{
			MethodName: "reBindPhone",
			Handler:    _Users_ReBindPhone_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Users_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Users_Login_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "MFAGetQRCode",
			Handler:    _Users_MFAGetQRCode_Handler,
		},
		{
			MethodName: "MFAActivate",
			Handler:    _Users_MFAActivate_Handler,
		},
		{
			MethodName: "MFACancel",
			Handler:    _Users_MFACancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hollow/v1/user.proto",
}
